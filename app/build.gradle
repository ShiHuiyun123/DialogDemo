apply plugin: 'com.android.application'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'com.github.dcendents.android-maven'


version = "1.0.0"
group = "com.quansu.dialogdemo"

def siteUrl = 'https://github.com/ShiHuiyun123/DialogDemo'
def gitUrl = 'https://github.com/ShiHuiyun123/DialogDemo.git'


android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.quansu.dialogdemo"
        minSdkVersion 19
        targetSdkVersion 28
        versionCode 1
        versionName "1.0.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}

/*第 4 步: 生成源 JAR
为了遵守 Maven 标准，你的库也应该有一个包含了库的源文件的 JAR 文件。
 为了生成 JAR 文件，需要创建一个新的 Jar任务，
 generateSourcesJar，并且使用 from 功能指定的源文件的位置。*/
task generateSourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier 'sources'
}

/*
第 5 步: 生成 Javadoc JAR
我们同样推荐，在你的库里有一个包含 Javadocs 的 JAR 文件。
 因为目前你还没有任何 Javadocs，需要创建一个新的 Javadoc 任务，generateJavadocs，来生成它们。
  使用 source 变量来指定源文件的位置。 你还应该更新 classpath 变量，以便该任务可以找到属于 Android SDK 的类。
 你可以通过把 android.getBootClasspath 方法的返回值添加给他，来这么做。
 */
task generateJavadocs(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}
/*下一步，要从 Javadocs 生成 JAR，需要创建 Jar 任务，generateJavadocsJar
，并把 generateJavadocs 的 destinationDir 属性传递给它的 from 功能。
为了确保在 generateJavadocsJar 任务只在 generateJavadocs 任务完成后才开始，
需要添加下面的代码片段，它使用了 dependsOn 方法来决定任务的顺序：
您的新任务应如下所示:*/
task generateJavadocsJar(type: Jar, dependsOn: generateJavadocs) {
    from generateJavadocs.destinationDir
    classifier 'javadoc'
}
/*
 *第 6 步: 引入生成的 JAR 文件
 *为了把源和 Javadoc JAR 文件导入到 artifacts 的列表里，你应该把他们的任务的名字添加到 configuration 里，
 * 称为 archives，artifacts 列表将被上传到 Maven 仓库。 使用下面的代码片段来完成:
 */
artifacts {
    archives generateJavadocsJar
    archives generateSourcesJar
}

/*第 7 步: 运行任务
现在是运行我们在前几步里创建的任务的时候了。 打开 Gradle Projects 窗口，搜索名为 install 的任务。*/

/*
第 8 步: 配置 Bintray 插件
要配置插件，你应该使用 Gradle 文件中的 bintray 闭包。 首先，使用与你的 Bintray 用户名和 API 密钥对应的 user 和 key 变量进
行身份验证。在 Bintray，你的库会被放置在 Bintray package 里。 你应该使用 pkg 闭包里命名直观的 repo、 name、licenses 和
vcsUrl 参数，提供详细的相关信息， 如果这个包不存在，会为你自动创建。当你将文件上传到 Bintray 时，他们会与 Bintray 包里的一
个版本相关联。 因此，pkg 必须包含一个 version 闭包，闭包的 name 属性要设为独一无二的名称。 另外，你还可以使用 desc，
released 和 vcsTag参数来提供描述、 发布日期和 Git 标签。
最后，为了指定应该上传的文件，要把 configuration 参数的值设为 archives。
bintray {
    user = 'test-user'
    key = '01234567890abcdef01234567890abcdef'
    pkg {
        repo = 'maven'
        name = 'com.github.hathibelagal.mylittlelibrary'

        version {
            name = '1.0.1-tuts'
            desc = 'My test upload'
            released  = new Date()
            vcsTag = '1.0.1'
        }

        licenses = ['Apache-2.0']
        vcsUrl = 'https://github.com/hathibelagal/LibraryTutorial.git'
        websiteUrl = 'https://github.com/hathibelagal/LibraryTutorial'
    }
    configurations = ['archives']
}
 */



install{

    repositories.mavenInstaller {
        // 生成pom.xml和参数
        pom{
            project {
                packaging 'aar'
                name  'DialogDemo'
                url siteUrl
                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }



                developers {
                    developer {
                        id 'littlenorth'
                        // 开发者的id。
                        name 'littlenorth'
                        // 开发者名字。
                        email 'shymoon@foxmail.com'
                        // 开发者邮箱。
                    }
                }


                scm {
                    connection gitUrl
                    // Git仓库地址。
                    developerConnection gitUrl
                    // Git仓库地址。
                    url siteUrl
                    // 项目主页。
                }

            }
        }

    }


}







//上传到JCenter
bintray {
    user ="littlenorth"
    key = "33145e28508e677a251d89ce4ef9319aa22a0f92"
    configurations = ['archives']
    pkg {
        repo = "maven"
        name = "DialogDemo"    //发布到JCenter上的项目名字

        version {
            name = '1.0.1-practice'
            desc = 'My test upload'
            vcsTag = '1.0.0'
        }

        websiteUrl = siteUrl
        vcsUrl = gitUrl
        licenses = ["Apache-2.0"]
        publish = true
    }
}
/*
第 9 步: 使用 Bintray 插件上传文件
再次打开 Gradle Projects 窗口，搜索 bintrayUpload 任务。 双击它，启动上传文件。*/
/*
一旦任务完成，你就能打开浏览器来访问你的 Bintray 包的详细信息页面。 你会看到一个通知，
说你有四个未发布的文件。 如果要发布这些文件，单击 Publish 链接。 */
/*
* 使用 Bintray 里的库
你的库现在已经可以作为 Bintray 包使用了。 只要你分享了你的 Maven 仓库的 URL，加上 group ID、artifact ID 和 version number，
任何开发人员都可以访问你的库。 例如，为了使用我们刚才创建的库，开发人员必须引入下面这个代码片段:
repositories {
    maven {
        url 'https://dl.bintray.com/eruzza/maven'
    }
}
dependencies {
    compile 'com.github.hathibelagal.librarytutorial:mylittlelibrary:1.0.1@aar'
}
注意，在把库添加为 compile 依赖之前，
开发人员必须显式地在 repositories 列表里，引入你的仓库。*/

/*
 * Bintray的用户手册:https://bintray.com/docs/usermanual/
 */

